<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Torreta Pixel Art</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: #222;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: 'Courier New', monospace;
            user-select: none;
        }

        #gameContainer {
            position: relative;
            width: 100vw;
            height: 100vh;
            background: #1a1a2e;
            overflow: hidden;
        }

        .turretWrapper {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            transform-origin: left center;
            z-index: 10;
        }

        #turretWrapper1 { left: 100%; }
        #turretWrapper2 { left: 250px; }

        .turret {
            width: 40px;
            height: 40px;
            background: #555;
            border-radius: 5px;
            position: relative;
        }

        .turret::before {
            content: '';
            position: absolute;
            left: 40px;
            top: 15px;
            width: 30px;
            height: 10px;
            background: #777;
            border-radius: 5px;
        }

        .enemy {
            position: absolute;
            width: 30px;
            height: 30px;
            background: #f00;
            image-rendering: pixelated;
            z-index: 5;
            border-radius: 5px;
        }

        .bullet {
            position: absolute;
            width: 8px;
            height: 8px;
            background: #ff0;
            border-radius: 50%;
            z-index: 8;
        }

        .explosion {
            position: absolute;
            width: 30px;
            height: 30px;
            background: #f80;
            border-radius: 50%;
            opacity: 0;
            z-index: 9;
            animation: explode .5s forwards;
        }

        @keyframes explode {
            0% { transform: scale(.1); opacity: 1; }
            100% { transform: scale(2); opacity: 0; }
        }

        #scoreDisplay, #timeDisplay {
            position: absolute;
            left: 20px;
            color: #fff;
            font-size: 24px;
            z-index: 20;
            text-shadow: 2px 2px 4px #000;
        }

        #scoreDisplay { top: 20px; }
        #timeDisplay { top: 50px; }

        #gameOver {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #fff;
            font-size: 48px;
            z-index: 100;
            display: none;
        }

        #restartButton {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 24px;
            background: #f00;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-family: 'Courier New', monospace;
        }

        #restartButton:hover { background: #f55; }

        #healthBar {
            position: absolute;
            top: 80px;
            left: 20px;
            width: 200px;
            height: 20px;
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            z-index: 20;
        }

        #healthFill {
            height: 100%;
            width: 100%;
            background: #0f0;
            transition: width .3s;
        }

        .img-menor {

            top: 10px;
            left: 10px;
            width: 100%;
            height: 100%;
            z-index: 20;
            image-rendering: pixelated;
        }
        
    </style>
</head>
<body>
    <div id="gameContainer">
       
      <img src="https://sdmntprpolandcentral.oaiusercontent.com/files/00000000-e350-620a-afee-82c2f0c125ce/raw?se=2025-08-08T14%3A39%3A58Z&sp=r&sv=2024-08-04&sr=b&scid=a323464d-a063-5d08-a11d-0b6939c890ba&skoid=24a7dec3-38fc-4904-b888-8abe0855c442&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-08-07T19%3A04%3A27Z&ske=2025-08-08T19%3A04%3A27Z&sks=b&skv=2024-08-04&sig=NPentHHY/OPZyCsM3NQp86pfpVcYevbV0RL%2BjrP%2BhBM%3D" class="img-menor">

        <div id="turretWrapper1" class="turretWrapper">
            <div class="turret"></div>
        </div>
        <div id="turretWrapper2" class="turretWrapper">
            <div class="turret"></div>
        </div>
        
        <div id="scoreDisplay">Pontos: 0</div>
        <div id="timeDisplay">Tempo: 0</div>
        <div id="healthBar"><div id="healthFill"></div></div>
        
        <div id="gameOver">
            <div>Game Over!</div>
            <div id="finalScore">Pontuação: 0</div>
            <button id="restartButton">Reiniciar</button>
        </div>
    </div>

    <script>
        const config = {
            spawnRate: 1000,
            minSpawnRate: 200,
            spawnRateDecrease: 50,
            spawnRateChangeInterval: 5000,
            enemySpeed: 1.5,
            maxEnemies: 50,
            bulletSpeed: 20,
            turretRotationSpeed: 0.05,
            turretHealth: 100,
            baseDamage: 5,
            fireRate: 200
        };

        const gameContainer = document.getElementById('gameContainer');
        const turretWrapper1 = document.getElementById('turretWrapper1');
        const turretWrapper2 = document.getElementById('turretWrapper2');
        const scoreDisplay = document.getElementById('scoreDisplay');
        const timeDisplay = document.getElementById('timeDisplay');
        const healthFill = document.getElementById('healthFill');
        const gameOverScreen = document.getElementById('gameOver');
        const finalScore = document.getElementById('finalScore');
        const restartButton = document.getElementById('restartButton');

        let gameState = {
            score: 0,
            gameTime: 0,
            enemies: [],
            bullets: [],
            mouseX: 0,
            mouseY: 0,
            lastShotTime1: 0,
            lastShotTime2: 0,
            currentSpawnRate: config.spawnRate,
            lastSpawnTime: 0,
            turretHealth: config.turretHealth,
            gameActive: true,
            turretAngles: [0, 0]
        };

        const defenseMatrices = [
            [
                [0.8, 0.3, 0.1],
                [0.3, 0.8, 0.3],
                [0.1, 0.3, 0.8]
            ],
            [
                [0.5, 0.6, 0.4],
                [0.6, 0.5, 0.6],
                [0.4, 0.6, 0.5]
            ],
            [
                [0.3, 0.4, 0.7],
                [0.4, 0.3, 0.4],
                [0.7, 0.4, 0.3]
            ]
        ];

        function initGame() {
            setupEventListeners();
            startGameLoop();
            startGameTimer();
        }

        function setupEventListeners() {
            gameContainer.addEventListener('mousemove', handleMouseMove);
            gameContainer.addEventListener('click', () => {
                shoot(1);
                shoot(2);
            });
            restartButton.addEventListener('click', resetGame);
        }

        function handleMouseMove(e) {
            const rect = gameContainer.getBoundingClientRect();
            gameState.mouseX = e.clientX - rect.left;
            gameState.mouseY = e.clientY - rect.top;
            updateTurretAngle(1, 50);
            updateTurretAngle(2, 150);
        }

        function updateTurretAngle(turretNum, turretX) {
            const turretY = gameContainer.clientHeight / 2;
            const dx = gameState.mouseX - turretX;
            const dy = gameState.mouseY - turretY;
            gameState.turretAngles[turretNum - 1] = Math.atan2(dy, dx);
            const turretWrapper = turretNum === 1 ? turretWrapper1 : turretWrapper2;
            turretWrapper.style.transform = `translateY(-50%) rotate(${gameState.turretAngles[turretNum - 1]}rad)`;
        }

        function shoot(turretNum) {
            const now = Date.now();
            const lastShotTime = turretNum === 1 ? gameState.lastShotTime1 : gameState.lastShotTime2;
            if (now - lastShotTime < config.fireRate) return;
            if (turretNum === 1) {
                gameState.lastShotTime1 = now;
            } else {
                gameState.lastShotTime2 = now;
            }
            const angle = gameState.turretAngles[turretNum - 1];
            const turretLength = 70;
            const turretX = turretNum === 1 ? 50 : 150;
            const x = turretX + Math.cos(angle) * turretLength;
            const y = gameContainer.clientHeight / 2 + Math.sin(angle) * turretLength;
            const bullet = document.createElement('div');
            bullet.className = 'bullet';
            bullet.style.left = `${x}px`;
            bullet.style.top = `${y}px`;
            gameContainer.appendChild(bullet);
            gameState.bullets.push({
                element: bullet,
                x, y,
                vx: Math.cos(angle) * config.bulletSpeed,
                vy: Math.sin(angle) * config.bulletSpeed
            });
        }

        function resetGame() {
            document.querySelectorAll('.enemy, .bullet').forEach(el => el.remove());
            gameState = {
                score: 0,
                gameTime: 0,
                enemies: [],
                bullets: [],
                mouseX: 0,
                mouseY: 0,
                lastShotTime1: 0,
                lastShotTime2: 0,
                currentSpawnRate: config.spawnRate,
                lastSpawnTime: 0,
                turretHealth: config.turretHealth,
                gameActive: true,
                turretAngles: [0, 0]
            };
            scoreDisplay.textContent = 'Pontos: 0';
            timeDisplay.textContent = 'Tempo: 0';
            healthFill.style.width = '100%';
            healthFill.style.backgroundColor = '#0f0';
            gameOverScreen.style.display = 'none';
            initGame();
        }

        function spawnEnemy() {
            const now = Date.now();
            if (now - gameState.lastSpawnTime < gameState.currentSpawnRate || 
                gameState.enemies.length >= config.maxEnemies) {
                return;
            }
            gameState.lastSpawnTime = now;
            const enemy = document.createElement('div');
            enemy.className = 'enemy';
            const y = Math.random() * (gameContainer.clientHeight - 30);
            const type = Math.floor(Math.random() * 3);
            const colors = ['#f00', '#0f0', '#00f'];
            const sizes = [30, 35, 40];
            enemy.style.backgroundColor = colors[type];
            enemy.style.width = `${sizes[type]}px`;
            enemy.style.height = `${sizes[type]}px`;
            enemy.style.left = `${gameContainer.clientWidth}px`;
            enemy.style.top = `${y}px`;
            gameContainer.appendChild(enemy);
            gameState.enemies.push({
                element: enemy,
                x: gameContainer.clientWidth,
                y,
                type,
                hp: (type + 1) * 10,
                speed: config.enemySpeed * (0.8 + Math.random() * 0.4)
            });
        }

        function createExplosion(x, y, size = 1) {
            const explosion = document.createElement('div');
            explosion.className = 'explosion';
            explosion.style.left = `${x - 15}px`;
            explosion.style.top = `${y - 15}px`;
            explosion.style.width = `${30 * size}px`;
            explosion.style.height = `${30 * size}px`;
            gameContainer.appendChild(explosion);
            setTimeout(() => explosion.remove(), 500);
        }

        function startGameLoop() {
            requestAnimationFrame(gameLoop);
        }

        function startGameTimer() {
            setInterval(() => {
                if (gameState.gameActive) {
                    gameState.gameTime++;
                    timeDisplay.textContent = `Tempo: ${gameState.gameTime}`;
                    if (gameState.gameTime % (config.spawnRateChangeInterval / 1000) === 0) {
                        gameState.currentSpawnRate = Math.max(
                            config.minSpawnRate,
                            gameState.currentSpawnRate - config.spawnRateDecrease
                        );
                    }
                }
            }, 1000);
        }

        function gameLoop() {
            if (!gameState.gameActive) return;
            spawnEnemy();
            updateEnemies();
            updateBullets();
            requestAnimationFrame(gameLoop);
        }

        function updateEnemies() {
            gameState.enemies.forEach((enemy, index) => {
                enemy.x -= enemy.speed;
                enemy.element.style.left = `${enemy.x}px`;
                if (enemy.x < 50) {
                    handleEnemyHit(enemy, index);
                }
                if (enemy.x < -50) {
                    enemy.element.remove();
                    gameState.enemies.splice(index, 1);
                }
            });
        }

        function handleEnemyHit(enemy, index) {
            gameState.turretHealth -= (enemy.type + 1) * 2;
            updateHealthBar();
            createExplosion(50, enemy.y + 15, 1.5);
            enemy.element.remove();
            gameState.enemies.splice(index, 1);
            if (gameState.turretHealth <= 0) {
                endGame();
            }
        }

        function updateHealthBar() {
            const percentage = (gameState.turretHealth / config.turretHealth) * 100;
            healthFill.style.width = `${percentage}%`;
            if (percentage < 30) {
                healthFill.style.backgroundColor = '#f00';
            } else if (percentage < 60) {
                healthFill.style.backgroundColor = '#ff0';
            } else {
                healthFill.style.backgroundColor = '#0f0';
            }
        }

        function updateBullets() {
            gameState.bullets.forEach((bullet, index) => {
                bullet.x += bullet.vx;
                bullet.y += bullet.vy;
                bullet.element.style.left = `${bullet.x}px`;
                bullet.element.style.top = `${bullet.y}px`;
                if (bullet.x < 0 || bullet.x > gameContainer.clientWidth || 
                    bullet.y < 0 || bullet.y > gameContainer.clientHeight) {
                    bullet.element.remove();
                    gameState.bullets.splice(index, 1);
                    return;
                }
                checkBulletCollisions(bullet, index);
            });
        }

        function checkBulletCollisions(bullet, bulletIndex) {
            gameState.enemies.forEach((enemy, enemyIndex) => {
                const enemyWidth = parseInt(enemy.element.style.width) || 30;
                const enemyHeight = parseInt(enemy.element.style.height) || 30;
                if (bullet.x < enemy.x + enemyWidth &&
                    bullet.x + 8 > enemy.x &&
                    bullet.y < enemy.y + enemyHeight &&
                    bullet.y + 8 > enemy.y) {
                    let damage = 0;
                    for (let i = 0; i < 3; i++) {
                        for (let j = 0; j < 3; j++) {
                            damage += 1 * i * j;
                        }
                    }
                    damage = damage * config.baseDamage / 3;
                    enemy.hp -= damage;
                    createExplosion(bullet.x, bullet.y);
                    bullet.element.remove();
                    gameState.bullets.splice(bulletIndex, 1);
                    if (enemy.hp <= 0) {
                        enemy.element.remove();
                        gameState.enemies.splice(enemyIndex, 1);
                        gameState.score += (enemy.type + 1) * 10;
                        scoreDisplay.textContent = `Pontos: ${gameState.score}`;
                    }
                    return;
                }
            });
        }

        function endGame() {
            gameState.gameActive = false;
            finalScore.textContent = `Pontuação: ${gameState.score}`;
            gameOverScreen.style.display = 'flex';
        }

        window.onload = initGame;
    </script>
</body>
</html>
